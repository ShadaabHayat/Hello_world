name: Ingestion Pipeline E2E Testing

on:
  workflow_dispatch:
    inputs:
      source:
        description: "Source connector"
        required: true
        type: choice
        options:
          - 'Authentication'
          - 'Resource'
          - 'UZ End System'
      sink:
        description: "Sink connector"
        required: true
        type: choice
        options:
          - 'Main'
          - 'DLQ'
      rdc:
        description: "RDC"
        required: true
        type: choice
        options:
          - 'feature-3'
          - 'zta-qa'
      env:
        description: "Environment"
        required: true
        type: choice
        options:
          - 'feature'
          - 'qa'

defaults:
  run:
    shell: bash
    working-directory: ./ingestion-engine/e2e-testing

env:
  SOURCE_CONNECTOR: ${{ inputs.source }}
  SINK_CONNECTOR: ${{ inputs.sink }}
  RDC: ${{ inputs.rdc }}
  ENV: ${{ inputs.env }}

jobs:
  poetry:
    name: Setup Poetry and install dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        poetry-version: ["1.8.4"]
        os: ["ubuntu-latest"]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run poetry image
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: View poetry --help
        run: poetry --help

      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install

  aws-login:
    name: AWS Login
    runs-on: ubuntu-latest
    needs: poetry
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::438465127823:role/deployment-terraform-role
          aws-region: us-east-1

  e2e-testing:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: aws-login
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Run the E2E tests
        run: poetry run python main.py

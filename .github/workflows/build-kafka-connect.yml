name: Build Kafka Connect Custom Image

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release
    paths:
      - 'resources/kafka-connect/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write
  checks: write
  issues: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: shadaab/test
  JAVA_VERSION: '17'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p scan-results

      - name: List files to be scanned in resources/kafka-connect
        run: |
          echo "Files to be scanned in resources/kafka-connect:"
          find ./resources/kafka-connect -type f

      - name: Run Horusec Security Scan
        uses: fike/horusec-action@v0.2.2
        with:
          arguments: >-
            -p="resources/kafka-connect"
            --config-file-path=".github/config/horusec-config.json"
            -O="scan-results/horusec-results.json"
            -o="json"
            --log-level="trace"

      - name: Upload Horusec scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: horusec-scan-results
          path: scan-results/horusec-results.json
          retention-days: 30
          if-no-files-found: warn

  test-and-code-coverage:
    name: Test and Code Coverage
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
    defaults:
      run:
        working-directory: resources/kafka-connect/custom-smt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven


      - name: Generate Coverage Report
        run: |
          mvn clean jacoco:prepare-agent test jacoco:report

      - name: Upload Coverage HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: target/site/jacoco/
          retention-days: 14

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 70
          title: '🔍 Custom SMT Code Coverage Analysis Details'
          pass-emoji: '✅'
          fail-emoji: '❌'
          update-comment: true
          debug-mode: true
          skip-if-no-changes: false
          continue-on-error: false


  build-image-and-push-to-ecr:
    name: Build and Push Docker Image
    needs: test-and-code-coverage
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    outputs:
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}
      image-tag: ${{ steps.meta.outputs.version }}  # more accurate output from meta step

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::888507318922:role/shadaab-test-github-action-role
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3000

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        id: ensure-ecr
        run: |
          set -e
          echo "Checking if ECR repo exists..."
          if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" > /dev/null 2>&1; then
            echo "::error::ECR repository '${ECR_REPOSITORY}' does not exist."
            exit 1
          fi
          echo "ECR repository '${ECR_REPOSITORY}' exists."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Extract Docker metadata (tags and labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=sha
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and Push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: resources/kafka-connect
          file: resources/kafka-connect/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

{{- if and .Values.prometheus.jmx.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "cp-kafka-connect.fullname" . }}-jmx-configmap
  labels:
    app: {{ template "cp-kafka-connect.name" . }}
    chart: {{ template "cp-kafka-connect.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  jmx-kafka-connect-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:{{ .Values.jmx.port }}/jmxrmi
    lowercaseOutputName: false
    lowercaseOutputLabelNames: false
    ssl: false
    whitelistObjectNames:
      - kafka.connect:*
      - io.confluent.*:*
      - "kafka.connect:type=task-error-metrics,*"
    rules:
      # Kafka Connect worker metrics
      - pattern: "kafka.connect<type=connect-worker-metrics>([^:]+)"
        name: aicore_kafka_connect_worker_$1
        type: GAUGE
        labels: {}

      # Kafka Connect connector metrics
      - pattern: "kafka.connect<type=connect-metrics, client-id=([^:]+)><>([^:]+)"
        name: aicore_kafka_connect_metrics_$2
        type: GAUGE
        labels:
          client: "$1"

      # Connector and task status metrics
      - pattern: "kafka.connect<type=connector-task-metrics, connector=([^:]+), task=([^:]+)><>status: ([^:]+)"
        name: aicore_kafka_connect_connector_status
        type: GAUGE
        value: 1
        labels:
          connector: "$1"
          task: "$2"
          status: "$3"

      # Generic connector metrics (captures both S3 and other connectors)
      - pattern: "kafka.connect<type=connector-metrics, connector=([^:]+)><>([^:]+)"
        name: aicore_kafka_connect_connector_$2
        type: GAUGE
        labels:
          connector: "$1"
          name: "$1"

      # Task-level metrics for all connectors
      - pattern: "kafka.connect<type=connector-task-metrics, connector=([^:]+), task=([^:]+)><>([^:]+)"
        name: aicore_kafka_connect_task_$3
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"
          name: "$1"

      # S3 Sink specific metrics
      - pattern: "kafka.connect<type=sink-task-metrics, connector=([^:]+), task=([^:]+)><>([^:]+)"
        name: aicore_s3_sink_$3
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"
          connector_name: "$1"



      # Task error metrics - comprehensive approach with multiple patterns
      # Pattern for total error metrics
      - pattern: "kafka.connect<type=task-error-metrics, connector=([^,]+), task=([^,]+)><>([^:]+)-total"
        name: aicore_kafka_connect_task_error_$3_total
        type: COUNTER
        labels:
          connector: "$1"
          task: "$2"

      # Pattern for count error metrics
      - pattern: "kafka.connect<type=task-error-metrics, connector=([^,]+), task=([^,]+)><>([^:]+)-count"
        name: aicore_kafka_connect_task_error_$3_count
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"

      # Pattern for rate error metrics
      - pattern: "kafka.connect<type=task-error-metrics, connector=([^,]+), task=([^,]+)><>([^:]+)-rate"
        name: aicore_kafka_connect_task_error_$3_rate
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"

      # Pattern for average error metrics
      - pattern: "kafka.connect<type=task-error-metrics, connector=([^,]+), task=([^,]+)><>([^:]+)-avg"
        name: aicore_kafka_connect_task_error_$3_avg
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"

      # Pattern for max error metrics
      - pattern: "kafka.connect<type=task-error-metrics, connector=([^,]+), task=([^,]+)><>([^:]+)-max"
        name: aicore_kafka_connect_task_error_$3_max
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"
          
      # Catch-all pattern for any other task error metrics
      - pattern: "kafka.connect<type=task-error-metrics, connector=([^,]+), task=([^,]+)><>([^:]+)"
        name: aicore_kafka_connect_task_error_$3
        type: GAUGE
        labels:
          connector: "$1"
          task: "$2"

{{- end }}

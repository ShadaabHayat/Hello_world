# Default values for cp-kafka-connect.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

## Image Info
## ref: https://hub.docker.com/r/confluentinc/cp-kafka/
image: 081731760779.dkr.ecr.us-east-1.amazonaws.com/aicore/kafka-connect-custom
imageTag: premain_285a23f

## Specify a imagePullPolicy
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
imagePullPolicy: Always

## Specify an array of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
imagePullSecrets:

servicePort: 8083

## Kafka Connect properties
## ref: https://docs.confluent.io/current/connect/userguide.html#configuring-workers
configurationOverrides:
  "plugin.path": "/usr/share/java,/usr/share/confluent-hub-components"
  "key.converter": "org.apache.kafka.connect.storage.StringConverter"
  "value.converter": "io.confluent.connect.avro.AvroConverter"
  "key.converter.schemas.enable": "false"
  "value.converter.schemas.enable": "false"
  "internal.key.converter": "org.apache.kafka.connect.storage.StringConverter"
  "internal.value.converter": "io.confluent.connect.avro.AvroConverter"
  "offset.storage.topic": "aicore-kafka-connect-cluster-offsets"
  "config.storage.topic": "aicore-kafka-connect-cluster-configs"
  "status.storage.topic": "aicore-kafka-connect-cluster-status"
  "config.storage.replication.factor": "1"
  "offset.storage.replication.factor": "1"
  "status.storage.replication.factor": "1"
  "offset.storage.partitions": "1"
  "status.storage.partitions": "1"
  "config.storage.partitions": "1"
  "offset.storage.cleanup.policy": "compact"
  "status.storage.cleanup.policy": "compact"
  "config.storage.cleanup.policy": "compact"

## Kafka Connect JVM Heap Option
heapOptions: "-Xms2G -Xmx2G"

## Additional env variables
## CUSTOM_SCRIPT_PATH is the path of the custom shell script to be ran mounted in a volume
customEnv:
  KAFKA_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=5555 -XX:+UseContainerSupport"

  # CUSTOM_SCRIPT_PATH: /etc/scripts/create-connectors.sh

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

## Custom pod annotations
podAnnotations: {}

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
nodeSelector: {}

## Taints to tolerate on node assignment:
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## Pod scheduling constraints
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Monitoring
## Kafka Connect JMX Settings
## ref: https://kafka.apache.org/documentation/#connect_monitoring
jmx:
  port: 5555

## Prometheus Exporter Configuration
## ref: https://prometheus.io/docs/instrumenting/exporters/
prometheus:
  ## JMX Exporter Configuration
  ## ref: https://github.com/prometheus/jmx_exporter
  jmx:
    enabled: true
    image: bitnami/jmx-exporter
    imageTag: 0.19.0
    imagePullPolicy: IfNotPresent
    port: 5556

    ## Resources configuration for the JMX exporter container.
    ## See the `resources` documentation above for details.
    resources: {}

## You can list load balanced service endpoint, or list of all brokers (which is hard in K8s).  e.g.:
## bootstrapServers: "PLAINTEXT://dozing-prawn-kafka-headless:9092"

kafka:
  bootstrapServers: "PLAINTEXT://kafka.kafka.svc.cluster.local:9092"

# kafkaConfig:
#   kafkaConfigMapName: "aicore-kafka-config"
#   kafkaBootstrapServersKey: "BOOTSTRAP_SERVER"

fullnameOverride: "aicore-kafka-connect"

## If the Kafka Chart is disabled a URL and port are required to connect
## e.g. gnoble-panther-cp-schema-registry:8081
cp-schema-registry:
  url: "aicore-kafka-schema-registry:8081"

## List of volumeMounts for connect server container
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
volumeMounts:
# - name: credentials
#   mountPath: /etc/creds-volume

## List of volumeMounts for connect server container
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
volumes:
# - name: credentials
#   secret:
#     secretName: creds

## Secret with multiple keys to serve the purpose of multiple secrets
## Values for all the keys will be base64 encoded when the Secret is created or updated
## ref: https://kubernetes.io/docs/concepts/configuration/secret/
secrets: {}
## These values are used only when "customEnv.CUSTOM_SCRIPT_PATH" is defined.
## "livenessProbe" is required only for the edge cases where the custom script to be ran takes too much time
## and errors by the ENTRYPOINT are ignored by the container
## As an example such a similar script is added to "cp-helm-charts/examples/create-connectors.sh"
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /connectors
    port: 8083
  initialDelaySeconds: 30
  periodSeconds: 5
  failureThreshold: 10

securityContext:
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 0
  runAsNonRoot: false
